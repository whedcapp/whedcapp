/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */


def cppSrcFiles = ["**/*.cc", "**/*.hh", "**/*.y", "**/*.l"].inject([]) {acc,val -> acc+project.fileTree(dir: "${projectDir}/src", include: val)}
logger.debug("CppSrcFiles = "+cppSrcFiles.join(", "))
def inputFiles1 = ["**/CMakeLists.txt","**/*.in"].inject([]) {acc,val -> acc+project.fileTree(dir: "${projectDir}/src", include: val)}
logger.debug("InputFiles1 = "+inputFiles1.join(", "))
def outputFiles1 =  [
    "${parent.buildDir}/crud_gen_tool/Makefile"
    ,"${parent.buildDir}/crud_gen_tool/partialCrudGenConfig.h"
    ,"${parent.buildDir}/crud_gen_tool/CMakeCache.txt"
    ,"${parent.buildDir}/crud_gen_tool/cmake_install.cmake"
]
logger.debug("OutputFiles1 = "+outputFiles1.join(", "))
def inputFiles2 = cppSrcFiles + inputFiles1 + outputFiles1
def outputFiles2 = [
    crudGenToolPath()
]
logger.debug("OutputFiles2 = "+outputFiles2.join(", "))
defaultTasks 'CmakeDebugBuild'
task CmakeDebug(type:Exec) {
     workingDir "${parent.buildDir}/${project.name}"
     inputs.files(inputFiles1)
     outputs.files(outputFiles1)
     group = 'Crud_gen_tool'
     description = 'Creates a build directory with UNIX Makefiles in ${project.buildDir}/crud_gen_tool'
     commandLine 'cmake',"${project.projectDir}/src/",'-DCMAKE_BUILD_TYPE=Debug'
     standardOutput = new ByteArrayOutputStream()
     ext.output = {
          return standardOutput.toString();
     }
     doFirst {
             environment "CRUD_GEN_TOOL_NAME",crudGenToolName
             mkdir "${project.buildDir}/crud_gen_tool"
     }
}
task CmakeDebugBuild(type:Exec) {
     dependsOn CmakeDebug
     workingDir "${parent.buildDir}/crud_gen_tool"
     inputs.files(inputFiles2)
     outputs.files(outputFiles2)
     group = 'Crud_gen_tool'
     description = 'Builds the crud_gen_tool'
     commandLine 'make','-k','-j'
     standardOutput = new ByteArrayOutputStream()
     ext.output = {
          return standardOutput.toString();
     }
     doLast {
            logger.info(standardOutput.toString())
     }
}
task CmakeRelease(type:Exec) {
     workingDir "${project.buildDir}/crud_gen_tool"
     inputs.files(inputFiles1)
     outputs.files(outputFiles1)
     group = 'Crud_gen_tool'
     description = 'Creates a build directory with UNIX Makefiles in ${project.buildDir}/crud_gen_tool'
     commandLine 'cmake',"${project.projectDir}/src/",'-DCMAKE_BUILD_TYPE=Debug'
     standardOutput = new ByteArrayOutputStream()
     ext.output = {
          return standardOutput.toString();
     }
     doFirst {
             mkdir "${project.buildDir}/crud_gen_tool"
     }
}
task CmakeReleaseBuild(type:Exec) {
     dependsOn CmakeRelease
     workingDir "${project.buildDir}/crud_gen_tool"
     inputs.files(inputFiles2)
     outputs.files(outputFiles2)
     group = 'Crud_gen_tool'
     description = 'Builds the crud_gen_tool'
     commandLine 'make','-k','-j'
     standardOutput = new ByteArrayOutputStream()
     errorOutput = new ByteArrayOutputStream()
     ext.output = {
          return standardOutput.toString();
     }
}
task clean() {
     doFirst {
             delete "${parent.buildDir}/crud_gen_tool"
     }
}