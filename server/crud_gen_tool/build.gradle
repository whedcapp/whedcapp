/*
  This file is part of Whedcapp - Well-being Health Environment Data Collection App - to collect self-evaluated data for research purpose
  Copyright (C) 2020-2021  Jonas Mellin, Catharina Gillsj√∂

  Whedcapp is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Whedcapp is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Whedcapp.  If not, see <https://www.gnu.org/licenses/>.
*/

def groupName = 'crud_gen_tool'

// find all paths with files matching 'CMakeLists.txt' or
// '*.in'
def cgt_cmakeDebugPrepInputFiles = ["**/CMakeLists.txt","**/*.in"].inject([]) {acc,val -> acc+project.fileTree(dir: "${projectDir}/src", include: val)}
logger.info("cgt_cmakeDebugPrepInputFiles = "+cgt_cmakeDebugPrepInputFiles.join(", "))

def cgt_cmakeDebugPrepOutputFiles =  [
    "${rootProject.buildDir}/${project.name}/Makefile"
    ,"${rootProject.buildDir}/${project.name}/partialCrudGenConfig.h"
    ,"${rootProject.buildDir}/${project.name}/CMakeCache.txt"
    ,"${rootProject.buildDir}/${project.name}/cmake_install.cmake"
]
logger.info("cgt_cmakeDebugPrepOutputFiles = "+cgt_cmakeDebugPrepOutputFiles.join(", "))



task cgt_CmakeDebugPrep(type:Exec) {
     workingDir "${rootProject.buildDir}/${project.name}"
     inputs.files(cgt_cmakeDebugPrepInputFiles)
     outputs.files(cgt_cmakeDebugPrepOutputFiles)
     group = groupName
     description = "Creates a build directory with UNIX Makefiles in ${project.buildDir}/${project.name}"
     ignoreExitValue true
     commandLine 'cmake',"${project.projectDir}/src/",'-DCMAKE_BUILD_TYPE=Debug'
     standardOutput = new ByteArrayOutputStream()
     ext.output = {
          return standardOutput.toString();
     }
     errorOutput = new ByteArrayOutputStream()
     ext.errorOutput = {
         return errorOutput.toString()
     }
     doFirst {
             environment "CRUD_GEN_TOOL_NAME",cgt_crudGenToolName
             mkdir "${rootProject.buildDir}/${project.name}"
     }
     doLast {
         logger.error("Result")
         if (execResult.exitValue) {
            logger.error(output())
            logger.error(errorOutput())
            throw new TaskExecutionException(it,
                new Exception("Command '${commandLine.join(' ')}' failed; "
                              + "see task output for details.")
            )
         }
     }
}

// find all paths with files matching '*.cc', *.hh', '*.y' or '*.l'
// 
def cgt_cppSrcFiles = ["**/*.cc", "**/*.hh", "**/*.y", "**/*.l"].inject([]) {acc,val -> acc+project.fileTree(dir: "${projectDir}/src", include: val)}
logger.info("CppSrcFiles = "+cgt_cppSrcFiles.join(", "))

def cgt_cmakeDebugBuildInputFiles = cgt_cppSrcFiles + cgt_cmakeDebugPrepInputFiles + cgt_cmakeDebugPrepOutputFiles
def cgt_cmakeDebugBuildOutputFiles = [
    cgt_crudGenToolPath()
]
logger.info("cgt_cmakeDebugBuildOutputFiles = "+cgt_cmakeDebugBuildOutputFiles.join(", "))

task cgt_CmakeDebugBuild(type:Exec) {
     dependsOn cgt_CmakeDebugPrep
     workingDir "${rootProject.buildDir}/${project.name}"
     inputs.files(cgt_cmakeDebugBuildInputFiles)
     outputs.files(cgt_cmakeDebugBuildOutputFiles)
     ignoreExitValue true
     group = groupName
     description = "Builds the ${project.name}"
     commandLine 'make','-k','-j'
     standardOutput = new ByteArrayOutputStream()
     errorOutput = new ByteArrayOutputStream()
     ext.output = {
          return standardOutput.toString();
     }
     ext.errorOutput = {
          return errorOutput.toString();
     }
     doLast {
         logger.error("Result")
         if (execResult.exitValue) {
            logger.error(output())
            logger.error(ext.errorOutput())
            throw new TaskExecutionException(it,
                new Exception("Command '${commandLine.join(' ')}' failed; "
                              + "see task output for details.")
            )
         }
     }
}

def cgt_cmakeReleasePrepInputFiles = cgt_cmakeDebugPrepInputFiles
def cgt_cmakeReleasePrepOutputFiles = cgt_cmakeDebugPrepOutputFiles

task cgt_CmakeReleasePrep(type:Exec) {
     workingDir "${rootProject.buildDir}/${project.name}"
     inputs.files(cgt_cmakeReleasePrepInputFiles)
     outputs.files(cgt_cmakeReleasePrepOutputFiles)
     group = groupName
     description = "Creates a build directory with UNIX Makefiles in ${rootProject.buildDir}/${project.name}"
     ignoreExitValue true
     commandLine 'cmake',"${project.projectDir}/src/",'-DCMAKE_BUILD_TYPE=Release'
     standardOutput = new ByteArrayOutputStream()
     ext.output = {
          return standardOutput.toString();
     }
     errorOutput = new ByteArrayOutputStream()
     ext.errorOutput = {
         return errorOutput.toString()
     }
     doFirst {
             // send target to cmake via CRUD_GEN_TOOL_NAME variable
             environment "CRUD_GEN_TOOL_NAME",cgt_crudGenToolName
             mkdir "${rootProject.buildDir}/${project.name}"
     }
     doLast {
         logger.error("Result:")
         if (execResult.exitValue) {
            logger.error(output())
            logger.error(ext.errorOutput())
            throw new TaskExecutionException(it,
                new Exception("Command '${commandLine.join(' ')}' failed; "
                              + "see task output for details.")
            )
        } else {
            logger.error("Compilation completed")
        }
     }

}

def cgt_cmakeReleaseBuildInputFiles = cgt_cmakeDebugBuildInputFiles
def cgt_cmakeReleaseBuildOutputFiles = cgt_cmakeDebugBuildOutputFiles
task cgt_CmakeReleaseBuild(type:Exec) {
     dependsOn cgt_CmakeReleasePrep
     workingDir "${rootProject.buildDir}/${project.name}"
     inputs.files(cgt_cmakeReleaseBuildInputFiles)
     outputs.files(cgt_cmakeReleaseBuildOutputFiles)
     group = groupName
     description = 'Builds the crud_gen_tool'
     commandLine 'make','-k','-j'
     standardOutput = new ByteArrayOutputStream()
     errorOutput = new ByteArrayOutputStream()
     ext.output = {
          return standardOutput.toString();
     }
     doLast {
            logger.info(standardOutput.toString())
            logger.info(errorOutput.toString())
     }
}
task clean() {
     doFirst {
             delete "${rootProject.buildDir}/${project.name}"
     }
}
