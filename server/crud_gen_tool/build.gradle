/*
  This file is part of Whedcapp - Well-being Health Environment Data Collection App - to collect self-evaluated data for research purpose
  Copyright (C) 2020-2021  Jonas Mellin, Catharina Gillsj√∂

  Whedcapp is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Whedcapp is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Whedcapp.  If not, see <https://www.gnu.org/licenses/>.
*/

def groupName = 'crud_gen_tool'
def cppSrcFiles = ["**/*.cc", "**/*.hh", "**/*.y", "**/*.l"].inject([]) {acc,val -> acc+project.fileTree(dir: "${projectDir}/src", include: val)}
logger.debug("CppSrcFiles = "+cppSrcFiles.join(", "))

def inputFiles1 = ["**/CMakeLists.txt","**/*.in"].inject([]) {acc,val -> acc+project.fileTree(dir: "${projectDir}/src", include: val)}
logger.debug("InputFiles1 = "+inputFiles1.join(", "))

def outputFiles1 =  [
    "${rootProject.buildDir}/${project.name}/Makefile"
    ,"${rootProject.buildDir}/${project.name}/partialCrudGenConfig.h"
    ,"${rootProject.buildDir}/${project.name}/CMakeCache.txt"
    ,"${rootProject.buildDir}/${project.name}/cmake_install.cmake"
]
logger.debug("OutputFiles1 = "+outputFiles1.join(", "))

def inputFiles2 = cppSrcFiles + inputFiles1 + outputFiles1
def outputFiles2 = [
    crudGenToolPath()
]
logger.debug("OutputFiles2 = "+outputFiles2.join(", "))


task CmakeDebug(type:Exec) {
     workingDir "${rootProject.buildDir}/${project.name}"
     inputs.files(inputFiles1)
     outputs.files(outputFiles1)
     group = groupName
     description = "Creates a build directory with UNIX Makefiles in ${project.buildDir}/${project.name}"
     commandLine 'cmake',"${project.projectDir}/src/",'-DCMAKE_BUILD_TYPE=Debug'
     standardOutput = new ByteArrayOutputStream()
     ext.output = {
          return standardOutput.toString();
     }
     doFirst {
             environment "CRUD_GEN_TOOL_NAME",crudGenToolName
             mkdir "${rootProject.buildDir}/${project.name}"
     }
}
task CmakeDebugBuild(type:Exec) {
     dependsOn CmakeDebug
     workingDir "${rootProject.buildDir}/${project.name}"
     inputs.files(inputFiles2)
     outputs.files(outputFiles2)
     group = groupName
     description = "Builds the ${project.name}"
     commandLine 'make','-k','-j'
     standardOutput = new ByteArrayOutputStream()
     errorOutput = new ByteArrayOutputStream()
     ext.output = {
          return standardOutput.toString();
     }
     doLast {
            logger.info(standardOutput.toString())
            logger.info(errorOutput.toString())
     }
}
task CmakeRelease(type:Exec) {
     workingDir "${rootProject.buildDir}/${project.name}"
     inputs.files(inputFiles1)
     outputs.files(outputFiles1)
     group = groupName
     description = "Creates a build directory with UNIX Makefiles in ${rootProject.buildDir}/${project.name}"
     commandLine 'cmake',"${project.projectDir}/src/",'-DCMAKE_BUILD_TYPE=Release'
     standardOutput = new ByteArrayOutputStream()
     ext.output = {
          return standardOutput.toString();
     }
     doFirst {
             // send target to cmake via CRUD_GEN_TOOL_NAME variable
             environment "CRUD_GEN_TOOL_NAME",crudGenToolName
             mkdir "${rootProject.buildDir}/${project.name}"
     }
     doLast {
            logger.info(standardOutput.toString())
     }
}
task CmakeReleaseBuild(type:Exec) {
     dependsOn CmakeRelease
     workingDir "${rootProject.buildDir}/${project.name}"
     inputs.files(inputFiles2)
     outputs.files(outputFiles2)
     group = groupName
     description = 'Builds the crud_gen_tool'
     commandLine 'make','-k','-j'
     standardOutput = new ByteArrayOutputStream()
     errorOutput = new ByteArrayOutputStream()
     ext.output = {
          return standardOutput.toString();
     }
     doLast {
            logger.info(standardOutput.toString())
            logger.info(errorOutput.toString())
     }
}
task clean() {
     doFirst {
             delete "${rootProject.buildDir}/${project.name}"
     }
}