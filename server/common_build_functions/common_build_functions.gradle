
def crudGenToolPath() {
    return "${rootProject.buildDir}/"+project(':crud_gen_tool').name+"/${ext.crudGenToolName}"
}

def dbDefPath() {
    return "${rootProject.buildDir}/"+project(':database').name+"/${ext.dbDefName}"
}

def dbBaseStoredProceduresPath() {
    return "${rootProject.buildDir}/"+project(':database').name+"/${ext.dbBaseStoredProceduresName}"
}


def dbCrudCfgPath() {
    return "${rootProject.buildDir}/"+project(':database').name+"/${ext.dbCrudCfgName}"
}

def dbCrudSqlSrcPath() {
    return "${rootProject.buildDir}/"+project(':database').name+"/${ext.dbCrudSqlSrcName}"
}

def dbCrudDartSrcPath() {
    return "${rootProject.buildDir}/"+project(':database').name+"/${ext.dbCrudDartSrcName}"
}
// adapted from http://www.groovyconsole.appspot.com/script/324001
static String checksum( String input ) {
    def digest = java.security.MessageDigest.getInstance("SHA-256")
    digest.update( input.bytes )
    new BigInteger(1,digest.digest()).toString(16).padLeft(32, '0')
}

def removeComments(String fileContent) {
    def state = 'outside'
    def result = new StringWriter(fileContent.size())
    for (int i = 0; i < fileContent.size(); ++i) {
        def c = fileContent.getAt(i)
        switch(state) {
            case 'outside':
                if (c == '/') {
                    state = 'slash'
                } else {
                    result.write(c)
                }
                break;
            case 'slash':
                if (c == '/') {
                    state = 'skip'
                } else if (c == '*') {
                    state = 'inside'
                } else {
                    state = 'outside'
                    result.write('/'+c)
                }
                break;
            case 'skip':
                if (c == '\n') {
                    state = 'outside'
                    result.write(c)
                } 
                break;
            case 'inside':
                if (c == '*') {
                    state = 'star'
                } else if (c == '\n' || c == '\r') {
                    result.write(c)
                } 
                break;
            case 'star':
                if (c == '/') {
                    state = 'outside'
                } else {
                    state = 'inside'
                }
                break;
        }
    }
    return result.toString()
}

def quotifySqlUserId(String sqlUid) {
    return "'"+sqlUid.collectReplacements({ it == '@' ? '\'@\'' : null })+"'"
}
def backquotifySqlId(String sqlId) {
    def state = 'outside';
    def result = ''
    for (int i = 0; i < sqlId.length(); ++i) {
        def c = sqlId.getAt(i);
        switch (state) {
        case 'outside':
            if (c == '*') {
                state = 'star';
            } else if (c == '.') {
                state = 'dot';
            } else {
                result += '`'+c;
                state = 'inside';
            }
            break;
        case 'inside':
            if (c == '.') {
                result += '`.';
                state = 'dot';
            } else if (c == '*') {
                throw new IllegalStateException("SQL Identifier \""+sqlUid+"\" follows incorrect syntax");
            } else {
                result += c;
            }
            break;
        case 'star':
            if (c == '.') {
                result += '.';
                state == 'dot';
            } else {
                throw new IllegalStateException("SQL Identifier \""+sqlUid+"\" follows incorrect syntax");
            } 
            
            break;
        case 'dot':
            if (c == '*') {
                result += c;
                state = 'star';
            } else if (c != '.') {
                result += '`'+c;
                state = 'inside';
            } else {
                throw new IllegalStateException("Sql Identifier \""+sqlId+"\" follows the wrong syntax");
            }
            break;
        }
    }
    return result;
}
ext {
    crudGenToolPath = this.&crudGenToolPath;
    dbDefPath = this.&dbDefPath;
    dbBaseStoredProceduresPath = this.&dbBaseStoredProceduresPath;
    dbCrudCfgPath = this.&dbCrudCfgPath;
    dbCrudSqlSrcPath = this.&dbCrudSqlSrcPath;
    dbCrudDartSrcPath = this.&dbCrudDartSrcPath;
    checksum = this.&checksum;
    removeComments = this.&removeComments;
    quotifySqlUserId = this.&quotifySqlUserId;
    backquotifySqlId = this.&backquotifySqlId;
}
