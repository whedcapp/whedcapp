
/*
 This file is part of Whedcapp - Well-being Health Environment Data Collection App - to collect self-evaluated data for research purpose
 Copyright (C) 2020-2021  Jonas Mellin, Catharina Gillsj√∂

 Whedcapp is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Whedcapp is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Whedcapp.  If not, see <https://www.gnu.org/licenses/>.
 */

import org.apache.tools.ant.filters.*;
import java.io.File;

def testSrcFiles = [ "**/*.robot.in", "**/*.robot", "**/*.txt", "**/*.txt.in", "**/*.py", "**/*.csv" ].inject([]) { acc, val -> acc+project.fileTree(dir: "${projectDir}", include: val ) }



def tst_prepareTestInputFiles = testSrcFiles + [ dbs_uploadToDatabaseTableFingerprintPath() ]
logger.info("tst_prepareTestInputFiles = "+tst_prepareTestInputFiles.join(", "))
def tst_prepareTestOutputFiles = testSrcFiles.inject([]) {acc, val -> acc+[ val.toString().replaceAll("^.*/test/","${rootProject.buildDir}/"+project(':test').name).replaceAll(".in","") ]}
logger.info("tst_prepareTestOutputFiles = "+tst_prepareTestOutputFiles.join(", "))
                                                                 
                                                                 


task tst_PrepareTest() {
    dependsOn ':database:dbs_UploadToDatabase'
    dependsOn ':database:dbs_OpenDatabaseAsWhedcappDatabaseTestAccessUser'
    inputs.files(tst_prepareTestInputFiles)
    outputs.files(tst_prepareTestOutputFiles)
    outputs.upToDateWhen {
        return rootProject.upToDateWhenBasedOnFiles(outputs.getFiles(),inputs.getFiles());
    }
    
    doLast {
        logger.info("Credentials = "+project(':database').ext.credentials['whedcappAdministrator']);
        logger.info("Test credentials = "+project(':database').ext.credentials['whedcappDatabaseTestAccessUser']);
        def tokenReplacements = [databaseName: '\'whedcapp\''
                                 ,whedcappAdministrator: '\''+project(':database').ext.credentials['whedcappAdministrator'].getUser()+'\''
                                 ,mysqlWhedcappUserId: '\''+project(':database').ext.credentials['whedcappDatabaseTestAccessUser'].getUser()+'\''
                                 ,mysqlWhedcappPassword: '\''+project(':database').ext.credentials['whedcappDatabaseTestAccessUser'].getPassword()+'\''
                                 ,mysqlWhedcappDatabaseHost: '\'localhost\''
                                 ,mysqlWhedcappDatabasePort: '3306'
                                 ,whedcappTestUser: 'test@localhost'
                                 ,whedcappOtherTestUser: 'othertest@localhost'
        ]
        logger.info("TR = "+tokenReplacements)
        copy {
            from "${projectDir}"
            include "**/*.robot.in"
            include "**/*.txt.in"
            into "${rootProject.buildDir}/${project.name}"
            filter(ReplaceTokens,tokens:tokenReplacements)
            rename '(.*)\\.in$', '$1'
        }
        copy {
            from "${projectDir}"
            include "**/*.robot"
            include "**/*.txt"
            include "**/*.py"
            include "**/*.csv"
            into "${rootProject.buildDir}/${project.name}"
        }
        mkdir "${rootProject.buildDir}/reports"
    }
}

def tst_performTestInputFiles = tst_prepareTestOutputFiles
def tst_performTestOutputFiles = [ "${rootProject.buildDir}/reports/log.html", "${rootProject.buildDir}/reports/output.html", "${rootProject.buildDir}/reports/output.xml" ]

// Invoke the robot framework recursively
task tst_PerformTest(type: Exec) {
    dependsOn ':test:tst_PrepareTest'
    workingDir "${rootProject.buildDir}/${project.name}"
    inputs.files(tst_performTestInputFiles)
    outputs.files(tst_performTestOutputFiles)
    outputs.upToDateWhen {
        return rootProject.upToDateWhenBasedOnFiles(outputs.getFiles(),inputs.getFiles());
    }
    commandLine "robot",'--outputdir',"${rootProject.buildDir}/reports",'--pythonpath',"${rootProject.buildDir}/test/Resources/Lib","."
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}
