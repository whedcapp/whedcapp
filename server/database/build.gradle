/*
  This file is part of Whedcapp - Well-being Health Environment Data Collection App - to collect self-evaluated data for research purpose
  Copyright (C) 2020-2021  Jonas Mellin, Catharina Gillsj√∂

  Whedcapp is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Whedcapp is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Whedcapp.  If not, see <https://www.gnu.org/licenses/>.
*/



def dbSrcFiles = ["**/*.cs", "**/*.sql"].inject([]) {acc,val -> acc+project.fileTree(dir: "${projectDir}/src", include: val)}
logger.debug("dbSrcFiles = "+dbSrcFiles.join(", "))

def crudGenerationPrepInputFiles = dbSrcFiles
def crudOutputFiles = [
    "${parent.buildDir}/database/crud.sql"
]
logger.debug("crudOutputFiles = "+crudOutputFiles.join(", "))

def crudGenerationPrepOutputFiles = [
    dbDefPath(),
    , dbCrudCfgPath()
]
logger.debug("crudGenerationPrepOutputFiles = "+crudGenerationPrepOutputFiles.join(", "))
def crudGenerationInputFiles = crudGenerationPrepOutputFiles + [ crudGenToolPath() ]

def crudGenerationOutputFiles = [ dbCrudSqlSrcPath()]

task CrudGenerationPrep(type:Copy) {
     //inputs = crudGenerationPrepInputFiles
     //outputs = crudGenerationPrepOutputFiles
     dbSrcFiles.each { p -> from(p) }
     into "${rootProject.buildDir}/${project.name}"
}

task CrudGeneration(type:Exec) {
     dependsOn 'CrudGenerationPrep'
     if (project.ext.buildType == 'Debug') {
          dependsOn ':crud_gen_tool:CmakeDebugBuild'
     } else {
          dependsOn ':crud_gen_tool:CmakeReleaseBuild'
     }
     workingDir "${parent.buildDir}/${project.name}"
     inputs.files(crudGenerationInputFiles)
     outputs.files(crudGenerationOutputFiles)
     group = 'Database'
     description = "Creates CRUD stored procedures based on ${parent}/build/ddl.sql"
     def cmd = crudGenToolPath()
     if (project.ext.traceParser == 'Yes') {
          commandLine cmd,'-p',dbDefPath(),'-c',dbCrudCfgPath(),'-s',dbCrudSqlSrcPath(),'-t'
     } else {
          commandLine cmd,'-p',dbDefPath(),'-c',dbCrudCfgPath(),'-s',dbCrudSqlSrcPath()
     }
     standardOutput = new ByteArrayOutputStream()
     ext.output = {
          return standardOutput.toString();
     }
     doFirst {
             mkdir "${rootProject.buildDir}/${project.name}"
     }
}
task UploadToDatabase(type:Exec) {
     dependsOn 'CrudGeneration'
     workingDir  "${parent.buildDir}/${project.name}"
     inputs.files()
     outputs.files()
     group = 'Database'
     description = "Creates user, uploads database from database schema and stored procedures."
     commandLine 'mysql','-u',${ext.mysqlRoot},'-p'
     standardOutput = new ByteArrayOutputStream()
     ext.output = {
         return standardOutput.toString();
     }
     doFirst {
         inputStream = new FileInputStream()
     }
}
task clean() {
     doFirst {
             delete "${rootProject.buildDir}/${project.name}"
     }
}