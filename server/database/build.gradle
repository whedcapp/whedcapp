/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
logger.info("database: CTGN = "+ext.crudGenToolName)
logger.info("database: CTGP = "+ext.crudGenToolPath())



def dbSrcFiles = ["**/*.cs", "**/*.sql"].inject([]) {acc,val -> acc+project.fileTree(dir: "${projectDir}/src", include: val)}
logger.info("dbSrcFiles = "+dbSrcFiles.join(", "))
def inputFiles = [ ext.crudGenToolPath() ] + dbSrcFiles
def crudOutputFiles = [
    "${parent.buildDir}/database/crud.sql"
]
logger.info("crudOutputFiles = "+crudOutputFiles.join(", "))
def staticDbOutputFiles = [
    "${parent.buildDir}/database/ddl.sql"
    , "${parent.buildDir}/database/basicStoredProcedures.sql"
]
logger.info("staticDbOutputFiles = "+staticDbOutputFiles.join(", "))
    


defaultTasks 'CrudGeneration'
task CrudGeneration(type:Exec) {
     dependsOn ':crud_gen_tool:CmakeDebugBuild'
     workingDir "${parent.buildDir}/database"
     inputs.files(inputFiles)
     outputs.files(crudOutputFiles)
     group = 'Database'
     description = "Creates CRUD stored procedures based on ${parent}/build/ddl.sql"
     def cmd = crudGenToolPath()
     commandLine cmd,'-p',dbDefPath()
     standardOutput = new ByteArrayOutputStream()
     ext.output = {
          return standardOutput.toString();
     }
     doFirst {
             mkdir "${rootProject.buildDir}/${project.name}"
     }
}
task clean() {
     doFirst {
             delete "${rootProject.buildDir}/${project.name}"
     }
}